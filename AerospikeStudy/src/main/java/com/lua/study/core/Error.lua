---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by lxy_m.
--- DateTime: 2019/12/16 15:36
---

--错误处理
--[[
程序运行中错误处理是必要的，在我们进行文件操作，
数据转移及web service 调用过程中都会出现不可预期的错误。
如果不注重错误信息的处理，就会造成信息泄露，程序无法运行等情况。
]]--

--语法错误
--语法错误通常是由于对程序的组件（如运算符、表达式）使用不当引起的。一个简单的实例如下：
-- a == 2

--运行错误
--运行错误是程序可以正常执行，但是会输出报错信息。如下实例由于参数输入错误，程序执行时报错：

function add(a,b)
    return a+b
end

add(10)

--[[
以下报错信息是由于程序缺少 b 参数引起的。
lua.exe com/lua/study/core/Error.lua
lua.exe: com/lua/study/core/Error.lua:22: attempt to perform arithmetic on local 'b' (a nil value)
stack traceback:
	com/lua/study/core/Error.lua:22: in function 'add'
	com/lua/study/core/Error.lua:25: in main chunk
	[C]: ?
]]--

--错误处理
--assert
local function add(a,b)
    assert(type(a) == "number", "a 不是一个数字")
    assert(type(b) == "number", "b 不是一个数字")
    return a+b
end
add(10)

--error函数
--语法格式：
--error (message [, level])
--[[
功能：终止正在执行的函数，并返回message的内容作为错误信息(error函数永远都不会返回)

通常情况下，error会附加一些错误位置的信息到message头部。

Level参数指示获得错误的位置:

    Level=1[默认]：为调用error位置(文件+行号)
    Level=2：指出哪个调用error的函数的函数
    Level=0:不添加错误位置信息
]]--


--pcall 和 xpcall、debug
--[[
Lua中处理错误，可以使用函数pcall（protected call）来包装需要执行的代码。

pcall接收一个函数和要传递给后者的参数，并执行，执行结果：有错误、无错误；返回值true或者或false, errorinfo。

语法格式如下

if pcall(function_name, ….) then
-- 没有错误
else
-- 一些错误
end
]]--

--[[
> =pcall(function(i) print(i) end, 33)
33
true

> =pcall(function(i) print(i) error('error..') end, 33)
33
false        stdin:1: error..
]]--