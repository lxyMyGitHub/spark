---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by lxy_m.
--- DateTime: 2019/12/16 11:20
---

--迭代器
--在 Lua 中迭代器是一种支持指针类型的结构，它可以遍历集合的每一个元素。

--泛型 for 迭代器
--[[
泛型 for 在自己内部保存迭代函数，
实际上它保存三个值：迭代函数、状态常量、控制变量。
泛型 for 迭代器提供了集合的 key/value 对，语法格式如下：
for k, v in pairs(t) do
    print(k, v)
end
k, v为变量列表；pairs(t)为表达式列表
]]--
array = {"Google", "百度"}

for key,value in ipairs(array)
do
    print(key, value)
end

-- Lua 默认提供的迭代函数 ipairs。

--无状态的迭代器
--无状态的迭代器是指不保留任何状态的迭代器，
--因此在循环中我们可以利用无状态迭代器避免创建闭包花费额外的代价。
function square(iteratorMaxCount,currentNumber)
    if currentNumber<iteratorMaxCount
    then
        currentNumber = currentNumber+1
        return currentNumber, currentNumber*currentNumber
    end
end

for i,n in square,3,0
do
    print(i,n)
end

function iter (a, i)
    i = i + 1
    local v = a[i]
    if v then
        return i, v
    end
end

function ipairs (a)
    return iter, a, 0
end



--多状态的迭代器
--[[
很多情况下，迭代器需要保存多个状态信息而不是简单的状态常量和控制变量，
最简单的方法是使用闭包，还有一种方法就是将所有的状态信息封装到 table 内，
将 table 作为迭代器的状态常量，因为这种情况下可以将所有的信息存放在 table 内，
所以迭代函数通常不需要第二个参数。
以下实例我们创建了自己的迭代器：
]]--
array = {"Google", "Runoob"}

function elementIterator (collection)
    local index = 0
    local count = #collection
    -- 闭包函数
    return function ()
        index = index + 1
        if index <= count
        then
            --  返回迭代器的当前元素
            return collection[index]
        end
    end
end

for element in elementIterator(array)
do
    print(element)
end
--以上实例中我们可以看到，elementIterator 内使用了闭包函数，实现计算集合大小并输出各个元素。


